import { AuthenticationService } from './../auth/authentication.service';
/**
 * SpongeblogSP API
 * Spongeblog blogging API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType } from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class CategoriesApi {

  protected basePath = 'http://localhost:8081';
  public defaultHeaders: Headers = new Headers();
  public configuration: Configuration = new Configuration();

  constructor(protected http: Http, @Optional() @Inject(BASE_PATH) basePath: string,
  @Inject(AuthenticationService) private auth: AuthenticationService,
  @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
    }
  }

  /**
   * Deletes a Category with defined Id.
   * @summary Delete Category
   * @param categoryId Unique identifier of a Category;
   */
  public apiV1CategoriesCategoryIdDeleteUsingDELETE(categoryId: number, extraHttpRequestParams?: any): Observable<any> {
    return this.apiV1CategoriesCategoryIdDeleteUsingDELETEWithHttpInfo(categoryId, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return {};
        }
      });
  }

  /**
   * Fetches Category with defined Id.
   * @summary Get Category
   * @param categoryId Unique identifier of a Category;
   */
  public apiV1CategoriesCategoryIdGetUsingGET(categoryId: number, extraHttpRequestParams?: any): Observable<models.CategoryDTO> {
    return this.apiV1CategoriesCategoryIdGetUsingGETWithHttpInfo(categoryId, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Returns all Categorys of defined parent Category.
   * @summary Categorys of Parent.
   * @param parentCategoryId Unique identifier of the parent Category;
   */
  public apiV1CategoriesChildrenParentCategoryIdGetUsingGET(
    parentCategoryId: number, extraHttpRequestParams?: any): Observable<models.CategoryDTO> {
    return this.apiV1CategoriesChildrenParentCategoryIdGetUsingGETWithHttpInfo(parentCategoryId, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Returns all Categorys.
   * @summary All Categorys
   */
  public apiV1CategoriesGetUsingGET(extraHttpRequestParams?: any): Observable<models.CategoryDTO> {
    return this.apiV1CategoriesGetUsingGETWithHttpInfo(extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Creates new Category entry.
   * @summary Create Category
   * @param categoryEdit categoryEdit
   */
  public apiV1CategoriesPostUsingPOST(categoryEdit: models.CategoryDTO, extraHttpRequestParams?: any): Observable<models.CategoryDTO> {
    return this.apiV1CategoriesPostUsingPOSTWithHttpInfo(categoryEdit, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Updated a Category entry.
   * @summary Update Category
   * @param categoryEdit categoryEdit
   */
  public apiV1CategoriesPutUsingPUT(categoryEdit: models.CategoryDTO, extraHttpRequestParams?: any): Observable<any> {
    return this.apiV1CategoriesPutUsingPUTWithHttpInfo(categoryEdit, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return {};
        }
      });
  }

  /**
   * Restores previous Category entry.
   * @summary Rewind Category
   * @param categoryId Unique identifier of a Category;
   */
  public apiV1CategoriesRewindCategoryIdPutUsingPUT(categoryId: number, extraHttpRequestParams?: any): Observable<any> {
    return this.apiV1CategoriesRewindCategoryIdPutUsingPUTWithHttpInfo(categoryId, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return {};
        }
      });
  }


  /**
   * Delete Category
   * Deletes a Category with defined Id.
   * @param categoryId Unique identifier of a Category;
   */
  public apiV1CategoriesCategoryIdDeleteUsingDELETEWithHttpInfo(categoryId: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/categories/${categoryId}'
      .replace('${' + 'categoryId' + '}', String(categoryId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // verify required parameter 'categoryId' is not null or undefined
    if (categoryId === null || categoryId === undefined) {
      throw new Error('Required parameter categoryId was null or undefined when calling apiV1CategoriesCategoryIdDeleteUsingDELETE.');
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials,
      responseType: ResponseContentType.Text
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get Category
   * Fetches Category with defined Id.
   * @param categoryId Unique identifier of a Category;
   */
  public apiV1CategoriesCategoryIdGetUsingGETWithHttpInfo(categoryId: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/categories/${categoryId}'
      .replace('${' + 'categoryId' + '}', String(categoryId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'categoryId' is not null or undefined
    if (categoryId === null || categoryId === undefined) {
      throw new Error('Required parameter categoryId was null or undefined when calling apiV1CategoriesCategoryIdGetUsingGET.');
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Categorys of Parent.
   * Returns all Categorys of defined parent Category.
   * @param parentCategoryId Unique identifier of the parent Category;
   */
  public apiV1CategoriesChildrenParentCategoryIdGetUsingGETWithHttpInfo(
    parentCategoryId: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/categories/children/${parentCategoryId}'
      .replace('${' + 'parentCategoryId' + '}', String(parentCategoryId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'parentCategoryId' is not null or undefined
    if (parentCategoryId === null || parentCategoryId === undefined) {
      throw new Error('Required parameter parentCategoryId was null or' +
      'undefined when calling apiV1CategoriesChildrenParentCategoryIdGetUsingGET.');
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * All Categorys
   * Returns all Categorys.
   */
  public apiV1CategoriesGetUsingGETWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/categories';

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Create Category
   * Creates new Category entry.
   * @param categoryEdit categoryEdit
   */
  public apiV1CategoriesPostUsingPOSTWithHttpInfo(categoryEdit: models.CategoryDTO, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/categories';

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // verify required parameter 'categoryEdit' is not null or undefined
    if (categoryEdit === null || categoryEdit === undefined) {
      throw new Error('Required parameter categoryEdit was null or undefined when calling apiV1CategoriesPostUsingPOST.');
    }

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: categoryEdit == null ? '' : JSON.stringify(categoryEdit), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update Category
   * Updated a Category entry.
   * @param categoryEdit categoryEdit
   */
  public apiV1CategoriesPutUsingPUTWithHttpInfo(categoryEdit: models.CategoryDTO, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/categories';

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // verify required parameter 'categoryEdit' is not null or undefined
    if (categoryEdit === null || categoryEdit === undefined) {
      throw new Error('Required parameter categoryEdit was null or undefined when calling apiV1CategoriesPutUsingPUT.');
    }

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: categoryEdit == null ? '' : JSON.stringify(categoryEdit), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials,
      responseType: ResponseContentType.Text
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Rewind Category
   * Restores previous Category entry.
   * @param categoryId Unique identifier of a Category;
   */
  public apiV1CategoriesRewindCategoryIdPutUsingPUTWithHttpInfo(categoryId: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/categories/rewind/${categoryId}'
      .replace('${' + 'categoryId' + '}', String(categoryId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // verify required parameter 'categoryId' is not null or undefined
    if (categoryId === null || categoryId === undefined) {
      throw new Error('Required parameter categoryId was null or undefined when calling apiV1CategoriesRewindCategoryIdPutUsingPUT.');
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials,
      responseType: ResponseContentType.Text
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

}
