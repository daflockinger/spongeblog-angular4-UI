import { AuthenticationService } from './../auth/authentication.service';
/**
 * SpongeblogSP API
 * Spongeblog blogging API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { InjectionError } from '@angular/core/src/di/reflective_errors';

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType } from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class BlogApi {

  protected basePath = 'http://localhost:8081';
  public defaultHeaders: Headers = new Headers();
  public configuration: Configuration = new Configuration();

  constructor(protected http: Http, @Optional() @Inject(BASE_PATH) basePath: string,
  @Optional() configuration: Configuration, @Inject(AuthenticationService) private auth: AuthenticationService) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
    }
  }

  /**
   * Deletes existing Blog.
   * @summary Delete Blog
   */
  public apiV1BlogDeleteUsingDELETE(extraHttpRequestParams?: any): Observable<any> {
    return this.apiV1BlogDeleteUsingDELETEWithHttpInfo(extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return {};
        }
      });
  }

  /**
   * Returns the Blog entry.
   * @summary Get Blog
   */
  public apiV1BlogGetUsingGET(extraHttpRequestParams?: any): Observable<models.BlogDTO> {
    return this.apiV1BlogGetUsingGETWithHttpInfo(extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Creates new Blog entry.
   * @summary Create Blog
   * @param blogEdit blogEdit
   */
  public apiV1BlogPostUsingPOST(blogEdit: models.BlogDTO, extraHttpRequestParams?: any): Observable<models.BlogDTO> {
    return this.apiV1BlogPostUsingPOSTWithHttpInfo(blogEdit, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Updated a Blog entry.
   * @summary Update Blog
   * @param blogEdit blogEdit
   */
  public apiV1BlogPutUsingPUT(blogEdit: models.BlogDTO, extraHttpRequestParams?: any): Observable<any> {
    return this.apiV1BlogPutUsingPUTWithHttpInfo(blogEdit, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return {};
        }
      });
  }

  /**
   * Restores previous Blog entry.
   * @summary Rewind Blog
   */
  public apiV1BlogRewindPutUsingPUT(extraHttpRequestParams?: any): Observable<any> {
    return this.apiV1BlogRewindPutUsingPUTWithHttpInfo(extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return {};
        }
      });
  }


  /**
   * Delete Blog
   * Deletes existing Blog.
   */
  public apiV1BlogDeleteUsingDELETEWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/blog';

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials,
      responseType: ResponseContentType.Text
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get Blog
   * Returns the Blog entry.
   */
  public apiV1BlogGetUsingGETWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/blog';

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Create Blog
   * Creates new Blog entry.
   * @param blogEdit blogEdit
   */
  public apiV1BlogPostUsingPOSTWithHttpInfo(blogEdit: models.BlogDTO, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/blog';

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // verify required parameter 'blogEdit' is not null or undefined
    if (blogEdit === null || blogEdit === undefined) {
      throw new Error('Required parameter blogEdit was null or undefined when calling apiV1BlogPostUsingPOST.');
    }
    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: blogEdit == null ? '' : JSON.stringify(blogEdit), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update Blog
   * Updated a Blog entry.
   * @param blogEdit blogEdit
   */
  public apiV1BlogPutUsingPUTWithHttpInfo(blogEdit: models.BlogDTO, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/blog';
    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // verify required parameter 'blogEdit' is not null or undefined
    if (blogEdit === null || blogEdit === undefined) {
      throw new Error('Required parameter blogEdit was null or undefined when calling apiV1BlogPutUsingPUT.');
    }
    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'text'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: blogEdit == null ? '' : JSON.stringify(blogEdit), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials,
      responseType: ResponseContentType.Text
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Rewind Blog
   * Restores previous Blog entry.
   */
  public apiV1BlogRewindPutUsingPUTWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/blog/rewind';

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials,
      responseType: ResponseContentType.Text
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

}
