import { AuthenticationService } from './../auth/authentication.service';
/**
 * SpongeblogSP API
 * Spongeblog blogging API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType } from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class UsersApi {

  protected basePath = 'http://localhost:8081';
  public defaultHeaders: Headers = new Headers();
  public configuration: Configuration = new Configuration();

  constructor(protected http: Http, @Optional() @Inject(BASE_PATH) basePath: string,
  @Inject(AuthenticationService) private auth: AuthenticationService,
  @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
    }
  }

  /**
   * Returns all Users.
   * @summary All Users
   */
  public apiV1UsersGetUsingGET(extraHttpRequestParams?: any): Observable<models.UserEditDTO> {
    return this.apiV1UsersGetUsingGETWithHttpInfo(extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Fetches User info with defined Id.
   * @summary Get User info
   * @param userId Unique identifier of a User;
   */
  public apiV1UsersInfoUserIdGetUsingGET(userId: number, extraHttpRequestParams?: any): Observable<models.UserInfoDTO> {
    return this.apiV1UsersInfoUserIdGetUsingGETWithHttpInfo(userId, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Fetches User by login name.
   * @summary Get User by login name
   * @param userName Login name of the user.
   */
  public apiV1UsersNameUserNameGet(userName: string, extraHttpRequestParams?: any): Observable<models.BlogUserDetails> {
    return this.apiV1UsersNameUserNameGetWithHttpInfo(userName, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Creates new User entry.
   * @summary Create User
   * @param userEdit userEdit
   */
  public apiV1UsersPostUsingPOST(userEdit: models.UserEditDTO, extraHttpRequestParams?: any): Observable<models.UserEditDTO> {
    return this.apiV1UsersPostUsingPOSTWithHttpInfo(userEdit, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Updated a User entry.
   * @summary Update User
   * @param userEdit userEdit
   */
  public apiV1UsersPutUsingPUT(userEdit: models.UserEditDTO, extraHttpRequestParams?: any): Observable<{}> {
    return this.apiV1UsersPutUsingPUTWithHttpInfo(userEdit, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return {};
        }
      });
  }

  /**
   * Restores previous User entry.
   * @summary Rewind User
   * @param userId Unique identifier of a User;
   */
  public apiV1UsersRewindUserIdPutUsingPUT(userId: number, extraHttpRequestParams?: any): Observable<{}> {
    return this.apiV1UsersRewindUserIdPutUsingPUTWithHttpInfo(userId, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return {};
        }
      });
  }

  /**
   * Deletes a User with defined Id.
   * @summary Delete User
   * @param userId Unique identifier of a User;
   */
  public apiV1UsersUserIdDeleteUsingDELETE(userId: number, extraHttpRequestParams?: any): Observable<{}> {
    return this.apiV1UsersUserIdDeleteUsingDELETEWithHttpInfo(userId, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return {};
        }
      });
  }

  /**
   * Fetches User with defined Id.
   * @summary Get User
   * @param userId Unique identifier of a User;
   */
  public apiV1UsersUserIdGetUsingGET(userId: number, extraHttpRequestParams?: any): Observable<models.UserEditDTO> {
    return this.apiV1UsersUserIdGetUsingGETWithHttpInfo(userId, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }


  /**
   * All Users
   * Returns all Users.
   */
  public apiV1UsersGetUsingGETWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/users';

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get User info
   * Fetches User info with defined Id.
   * @param userId Unique identifier of a User;
   */
  public apiV1UsersInfoUserIdGetUsingGETWithHttpInfo(userId: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/users/info/${userId}'
      .replace('${' + 'userId' + '}', String(userId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling apiV1UsersInfoUserIdGetUsingGET.');
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get User by login name
   * Fetches User by login name.
   * @param userName Login name of the user.
   */
  public apiV1UsersNameUserNameGetWithHttpInfo(userName: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/users/name/${userName}'
      .replace('${' + 'userName' + '}', String(userName));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userName' is not null or undefined
    if (userName === null || userName === undefined) {
      throw new Error('Required parameter userName was null or undefined when calling apiV1UsersNameUserNameGet.');
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Create User
   * Creates new User entry.
   * @param userEdit userEdit
   */
  public apiV1UsersPostUsingPOSTWithHttpInfo(userEdit: models.UserEditDTO, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/users';

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // verify required parameter 'userEdit' is not null or undefined
    if (userEdit === null || userEdit === undefined) {
      throw new Error('Required parameter userEdit was null or undefined when calling apiV1UsersPostUsingPOST.');
    }

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: userEdit == null ? '' : JSON.stringify(userEdit), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update User
   * Updated a User entry.
   * @param userEdit userEdit
   */
  public apiV1UsersPutUsingPUTWithHttpInfo(userEdit: models.UserEditDTO, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/users';

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // verify required parameter 'userEdit' is not null or undefined
    if (userEdit === null || userEdit === undefined) {
      throw new Error('Required parameter userEdit was null or undefined when calling apiV1UsersPutUsingPUT.');
    }

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: userEdit == null ? '' : JSON.stringify(userEdit), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials,
      responseType: ResponseContentType.Text
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Rewind User
   * Restores previous User entry.
   * @param userId Unique identifier of a User;
   */
  public apiV1UsersRewindUserIdPutUsingPUTWithHttpInfo(userId: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/users/rewind/${userId}'
      .replace('${' + 'userId' + '}', String(userId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling apiV1UsersRewindUserIdPutUsingPUT.');
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials,
      responseType: ResponseContentType.Text
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Delete User
   * Deletes a User with defined Id.
   * @param userId Unique identifier of a User;
   */
  public apiV1UsersUserIdDeleteUsingDELETEWithHttpInfo(userId: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/users/${userId}'
      .replace('${' + 'userId' + '}', String(userId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling apiV1UsersUserIdDeleteUsingDELETE.');
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials,
      responseType: ResponseContentType.Text
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get User
   * Fetches User with defined Id.
   * @param userId Unique identifier of a User;
   */
  public apiV1UsersUserIdGetUsingGETWithHttpInfo(userId: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/users/${userId}'
      .replace('${' + 'userId' + '}', String(userId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling apiV1UsersUserIdGetUsingGET.');
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

}
