import { AuthenticationService } from './../auth/authentication.service';
/**
 * SpongeblogSP API
 * Spongeblog blogging API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType } from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class TagsApi {

  protected basePath = 'http://localhost:8081';
  public defaultHeaders: Headers = new Headers();
  public configuration: Configuration = new Configuration();

  constructor(protected http: Http, @Optional() @Inject(BASE_PATH) basePath: string,
  @Inject(AuthenticationService) private auth: AuthenticationService,
  @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
    }
  }

  /**
   * Returns all Tags.
   * @summary All Tags
   */
  public apiV1TagsGetUsingGET(extraHttpRequestParams?: any): Observable<models.TagDTO> {
    return this.apiV1TagsGetUsingGETWithHttpInfo(extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Creates new Tag entry.
   * @summary Create Tag
   * @param tagEdit tagEdit
   */
  public apiV1TagsPostUsingPOST(tagEdit: models.TagDTO, extraHttpRequestParams?: any): Observable<models.TagDTO> {
    return this.apiV1TagsPostUsingPOSTWithHttpInfo(tagEdit, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Updated a Tag entry.
   * @summary Update Tag
   * @param tagEdit tagEdit
   */
  public apiV1TagsPutUsingPUT(tagEdit: models.TagDTO, extraHttpRequestParams?: any): Observable<any> {
    return this.apiV1TagsPutUsingPUTWithHttpInfo(tagEdit, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return {};
        }
      });
  }

  /**
   * Restores previous Tag entry.
   * @summary Rewind Tag
   * @param tagId Unique identifier of a Tag;
   */
  public apiV1TagsRewindTagIdPutUsingPUT(tagId: number, extraHttpRequestParams?: any): Observable<any> {
    return this.apiV1TagsRewindTagIdPutUsingPUTWithHttpInfo(tagId, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return {};
        }
      });
  }

  /**
   * Deletes a Tag with defined Id.
   * @summary Delete Tag
   * @param tagId Unique identifier of a Tag;
   */
  public apiV1TagsTagIdDeleteUsingDELETE(tagId: number, extraHttpRequestParams?: any): Observable<any> {
    return this.apiV1TagsTagIdDeleteUsingDELETEWithHttpInfo(tagId, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return {};
        }
      });
  }

  /**
   * Fetches Tag with defined Id.
   * @summary Get Tag
   * @param tagId Unique identifier of a Tag;
   */
  public apiV1TagsTagIdGetUsingGET(tagId: number, extraHttpRequestParams?: any): Observable<models.TagDTO> {
    return this.apiV1TagsTagIdGetUsingGETWithHttpInfo(tagId, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }


  /**
   * All Tags
   * Returns all Tags.
   */
  public apiV1TagsGetUsingGETWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/tags';

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // to determine the Content-Type header

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Create Tag
   * Creates new Tag entry.
   * @param tagEdit tagEdit
   */
  public apiV1TagsPostUsingPOSTWithHttpInfo(tagEdit: models.TagDTO, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/tags';

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // verify required parameter 'tagEdit' is not null or undefined
    if (tagEdit === null || tagEdit === undefined) {
      throw new Error('Required parameter tagEdit was null or undefined when calling apiV1TagsPostUsingPOST.');
    }

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: tagEdit == null ? '' : JSON.stringify(tagEdit), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update Tag
   * Updated a Tag entry.
   * @param tagEdit tagEdit
   */
  public apiV1TagsPutUsingPUTWithHttpInfo(tagEdit: models.TagDTO, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/tags';

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // verify required parameter 'tagEdit' is not null or undefined
    if (tagEdit === null || tagEdit === undefined) {
      throw new Error('Required parameter tagEdit was null or undefined when calling apiV1TagsPutUsingPUT.');
    }

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: tagEdit == null ? '' : JSON.stringify(tagEdit), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials,
      responseType: ResponseContentType.Text
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Rewind Tag
   * Restores previous Tag entry.
   * @param tagId Unique identifier of a Tag;
   */
  public apiV1TagsRewindTagIdPutUsingPUTWithHttpInfo(tagId: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/tags/rewind/${tagId}'
      .replace('${' + 'tagId' + '}', String(tagId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // verify required parameter 'tagId' is not null or undefined
    if (tagId === null || tagId === undefined) {
      throw new Error('Required parameter tagId was null or undefined when calling apiV1TagsRewindTagIdPutUsingPUT.');
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials,
      responseType: ResponseContentType.Text
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Delete Tag
   * Deletes a Tag with defined Id.
   * @param tagId Unique identifier of a Tag;
   */
  public apiV1TagsTagIdDeleteUsingDELETEWithHttpInfo(tagId: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/tags/${tagId}'
      .replace('${' + 'tagId' + '}', String(tagId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    headers.append('Authorization', 'Bearer ' + this.auth.getToken());
    // verify required parameter 'tagId' is not null or undefined
    if (tagId === null || tagId === undefined) {
      throw new Error('Required parameter tagId was null or undefined when calling apiV1TagsTagIdDeleteUsingDELETE.');
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials,
      responseType: ResponseContentType.Text
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get Tag
   * Fetches Tag with defined Id.
   * @param tagId Unique identifier of a Tag;
   */
  public apiV1TagsTagIdGetUsingGETWithHttpInfo(tagId: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/tags/${tagId}'
      .replace('${' + 'tagId' + '}', String(tagId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'tagId' is not null or undefined
    if (tagId === null || tagId === undefined) {
      throw new Error('Required parameter tagId was null or undefined when calling apiV1TagsTagIdGetUsingGET.');
    }

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

}
