/**
 * SpongeblogSP API
 * Spongeblog blogging API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType } from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';


@Injectable()
export class PostsApi {

  protected basePath = 'http://localhost:8081';
  public defaultHeaders: Headers = new Headers();
  public configuration: Configuration = new Configuration();

  constructor(protected http: Http, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
    }
  }

  /**
   * Returns all posts from defined User.
   * @summary Posts from User
   * @param userId Unique identifier of a User;
   * @param page Page number from that on entities are returned.
   * @param size Entities per page.
   */
  public apiV1PostsAuthorUserIdGetUsingGET(userId: number,
  page?: number, size?: number, extraHttpRequestParams?: any): Observable<models.PostsPage> {
    return this.apiV1PostsAuthorUserIdGetUsingGETWithHttpInfo(userId, page, size, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Returns all posts from defined User and Status.
   * @summary Posts from User and Status
   * @param userId Unique identifier of a User;
   * @param status Post Status Id
   * @param page Page number from that on entities are returned.
   * @param size Entities per page.
   */
  public apiV1PostsAuthorUserIdStatusGetUsingGET(userId: number, status: string,
  page?: number, size?: number, extraHttpRequestParams?: any): Observable<models.PostsPage> {
    return this.apiV1PostsAuthorUserIdStatusGetUsingGETWithHttpInfo(userId, status, page, size, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Returns all posts from defined Category.
   * @summary Posts from Category
   * @param categoryId Unique identifier of a Category;
   * @param page Page number from that on entities are returned.
   * @param size Entities per page.
   */
  public apiV1PostsCategoryCategoryIdGetUsingGET(categoryId: number,
  page?: number, size?: number, extraHttpRequestParams?: any): Observable<models.PostsPage> {
    return this.apiV1PostsCategoryCategoryIdGetUsingGETWithHttpInfo(categoryId, page, size, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Returns all posts from defined Category and Status.
   * @summary Posts from Category and Status
   * @param categoryId Unique identifier of a Category;
   * @param status Post Status Id
   * @param page Page number from that on entities are returned.
   * @param size Entities per page.
   */
  public apiV1PostsCategoryCategoryIdStatusGetUsingGET(categoryId: number, status: string,
  page?: number, size?: number, extraHttpRequestParams?: any): Observable<models.PostsPage> {
    return this.apiV1PostsCategoryCategoryIdStatusGetUsingGETWithHttpInfo(categoryId, status, page, size, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Returns all posts (paginated).
   * @summary All posts
   * @param page Page number from that on entities are returned.
   * @param size Entities per page.
   */
  public apiV1PostsGetUsingGET(page?: number, size?: number, extraHttpRequestParams?: any): Observable<models.PostsPage> {
    return this.apiV1PostsGetUsingGETWithHttpInfo(page, size, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Deletes a Post with defined Id.
   * @summary Delete Post
   * @param postId Unique identifier of a Post;
   */
  public apiV1PostsPostIdDeleteUsingDELETE(postId: number, extraHttpRequestParams?: any): Observable<any> {
    return this.apiV1PostsPostIdDeleteUsingDELETEWithHttpInfo(postId, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Fetches Post with defined Id.
   * @summary Get Post
   * @param postId Unique identifier of a Post;
   */
  public apiV1PostsPostIdGetUsingGET(postId: number, extraHttpRequestParams?: any): Observable<models.PostDTO> {
    return this.apiV1PostsPostIdGetUsingGETWithHttpInfo(postId, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Creates new Post entry.
   * @summary Create Post
   * @param postEdit postEdit
   */
  public apiV1PostsPostUsingPOST(postEdit: models.PostDTO, extraHttpRequestParams?: any): Observable<models.PostDTO> {
    return this.apiV1PostsPostUsingPOSTWithHttpInfo(postEdit, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Updated a Post entry.
   * @summary Update Post
   * @param postEdit postEdit
   */
  public apiV1PostsPutUsingPUT(postEdit: models.PostDTO, extraHttpRequestParams?: any): Observable<any> {
    return this.apiV1PostsPutUsingPUTWithHttpInfo(postEdit, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Restores previous Post entry.
   * @summary Rewind Post
   * @param postId Unique identifier of a Post;
   */
  public apiV1PostsRewindPostIdPutUsingPUT(postId: number, extraHttpRequestParams?: any): Observable<any> {
    return this.apiV1PostsRewindPostIdPutUsingPUTWithHttpInfo(postId, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Returns all posts with defined status.
   * @summary Posts with status
   * @param status Post Status Id
   * @param page Page number from that on entities are returned.
   * @param size Entities per page.
   */
  public apiV1PostsStatusStatusGetUsingGET(status: string,
  page?: number, size?: number, extraHttpRequestParams?: any): Observable<models.PostsPage> {
    return this.apiV1PostsStatusStatusGetUsingGETWithHttpInfo(status, page, size, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Returns all posts from defined Tag.
   * @summary Posts from Tag
   * @param tagId Unique identifier of a Tag;
   * @param page Page number from that on entities are returned.
   * @param size Entities per page.
   */
  public apiV1PostsTagTagIdGetUsingGET(tagId: number,
  page?: number, size?: number, extraHttpRequestParams?: any): Observable<models.PostsPage> {
    return this.apiV1PostsTagTagIdGetUsingGETWithHttpInfo(tagId, page, size, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }

  /**
   * Returns all posts from defined Tag and Status.
   * @summary Posts from Tag and Status
   * @param tagId Unique identifier of a Tag;
   * @param status Post Status Id
   * @param page Page number from that on entities are returned.
   * @param size Entities per page.
   */
  public apiV1PostsTagTagIdStatusGetUsingGET(tagId: number, status: string,
  page?: number, size?: number, extraHttpRequestParams?: any): Observable<models.PostsPage> {
    return this.apiV1PostsTagTagIdStatusGetUsingGETWithHttpInfo(tagId, status, page, size, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json() || {};
        }
      });
  }


  /**
   * Posts from User
   * Returns all posts from defined User.
   * @param userId Unique identifier of a User;
   * @param page Page number from that on entities are returned.
   * @param size Entities per page.
   */
  public apiV1PostsAuthorUserIdGetUsingGETWithHttpInfo(userId: number,
  page?: number, size?: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/posts/author/${userId}'
      .replace('${' + 'userId' + '}', String(userId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling apiV1PostsAuthorUserIdGetUsingGET.');
    }
    if (page !== undefined) {
      queryParameters.set('page', <any>page);
    }

    if (size !== undefined) {
      queryParameters.set('size', <any>size);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Posts from User and Status
   * Returns all posts from defined User and Status.
   * @param userId Unique identifier of a User;
   * @param status Post Status Id
   * @param page Page number from that on entities are returned.
   * @param size Entities per page.
   */
  public apiV1PostsAuthorUserIdStatusGetUsingGETWithHttpInfo(userId: number, status: string,
  page?: number, size?: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/posts/author/${userId}/${status}'
      .replace('${' + 'userId' + '}', String(userId))
      .replace('${' + 'status' + '}', String(status));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'userId' is not null or undefined
    if (userId === null || userId === undefined) {
      throw new Error('Required parameter userId was null or undefined when calling apiV1PostsAuthorUserIdStatusGetUsingGET.');
    }
    // verify required parameter 'status' is not null or undefined
    if (status === null || status === undefined) {
      throw new Error('Required parameter status was null or undefined when calling apiV1PostsAuthorUserIdStatusGetUsingGET.');
    }
    if (page !== undefined) {
      queryParameters.set('page', <any>page);
    }

    if (size !== undefined) {
      queryParameters.set('size', <any>size);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Posts from Category
   * Returns all posts from defined Category.
   * @param categoryId Unique identifier of a Category;
   * @param page Page number from that on entities are returned.
   * @param size Entities per page.
   */
  public apiV1PostsCategoryCategoryIdGetUsingGETWithHttpInfo(categoryId: number,
  page?: number, size?: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/posts/category/${categoryId}'
      .replace('${' + 'categoryId' + '}', String(categoryId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'categoryId' is not null or undefined
    if (categoryId === null || categoryId === undefined) {
      throw new Error('Required parameter categoryId was null or undefined when calling apiV1PostsCategoryCategoryIdGetUsingGET.');
    }
    if (page !== undefined) {
      queryParameters.set('page', <any>page);
    }

    if (size !== undefined) {
      queryParameters.set('size', <any>size);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Posts from Category and Status
   * Returns all posts from defined Category and Status.
   * @param categoryId Unique identifier of a Category;
   * @param status Post Status Id
   * @param page Page number from that on entities are returned.
   * @param size Entities per page.
   */
  public apiV1PostsCategoryCategoryIdStatusGetUsingGETWithHttpInfo(categoryId: number, status: string,
  page?: number, size?: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/posts/category/${categoryId}/${status}'
      .replace('${' + 'categoryId' + '}', String(categoryId))
      .replace('${' + 'status' + '}', String(status));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'categoryId' is not null or undefined
    if (categoryId === null || categoryId === undefined) {
      throw new Error('Required parameter categoryId was null or undefined when calling apiV1PostsCategoryCategoryIdStatusGetUsingGET.');
    }
    // verify required parameter 'status' is not null or undefined
    if (status === null || status === undefined) {
      throw new Error('Required parameter status was null or undefined when calling apiV1PostsCategoryCategoryIdStatusGetUsingGET.');
    }
    if (page !== undefined) {
      queryParameters.set('page', <any>page);
    }

    if (size !== undefined) {
      queryParameters.set('size', <any>size);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * All posts
   * Returns all posts (paginated).
   * @param page Page number from that on entities are returned.
   * @param size Entities per page.
   */
  public apiV1PostsGetUsingGETWithHttpInfo(page?: number, size?: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/posts';

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    if (page !== undefined) {
      queryParameters.set('page', <any>page);
    }

    if (size !== undefined) {
      queryParameters.set('size', <any>size);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Delete Post
   * Deletes a Post with defined Id.
   * @param postId Unique identifier of a Post;
   */
  public apiV1PostsPostIdDeleteUsingDELETEWithHttpInfo(postId: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/posts/${postId}'
      .replace('${' + 'postId' + '}', String(postId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'postId' is not null or undefined
    if (postId === null || postId === undefined) {
      throw new Error('Required parameter postId was null or undefined when calling apiV1PostsPostIdDeleteUsingDELETE.');
    }
    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get Post
   * Fetches Post with defined Id.
   * @param postId Unique identifier of a Post;
   */
  public apiV1PostsPostIdGetUsingGETWithHttpInfo(postId: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/posts/${postId}'
      .replace('${' + 'postId' + '}', String(postId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'postId' is not null or undefined
    if (postId === null || postId === undefined) {
      throw new Error('Required parameter postId was null or undefined when calling apiV1PostsPostIdGetUsingGET.');
    }
    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Create Post
   * Creates new Post entry.
   * @param postEdit postEdit
   */
  public apiV1PostsPostUsingPOSTWithHttpInfo(postEdit: models.PostDTO, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/posts';

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'postEdit' is not null or undefined
    if (postEdit === null || postEdit === undefined) {
      throw new Error('Required parameter postEdit was null or undefined when calling apiV1PostsPostUsingPOST.');
    }
    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: postEdit == null ? '' : JSON.stringify(postEdit), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Update Post
   * Updated a Post entry.
   * @param postEdit postEdit
   */
  public apiV1PostsPutUsingPUTWithHttpInfo(postEdit: models.PostDTO, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/posts';

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'postEdit' is not null or undefined
    if (postEdit === null || postEdit === undefined) {
      throw new Error('Required parameter postEdit was null or undefined when calling apiV1PostsPutUsingPUT.');
    }
    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: postEdit == null ? '' : JSON.stringify(postEdit), // https://github.com/angular/angular/issues/10612
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Rewind Post
   * Restores previous Post entry.
   * @param postId Unique identifier of a Post;
   */
  public apiV1PostsRewindPostIdPutUsingPUTWithHttpInfo(postId: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/posts/rewind/${postId}'
      .replace('${' + 'postId' + '}', String(postId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'postId' is not null or undefined
    if (postId === null || postId === undefined) {
      throw new Error('Required parameter postId was null or undefined when calling apiV1PostsRewindPostIdPutUsingPUT.');
    }
    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Posts with status
   * Returns all posts with defined status.
   * @param status Post Status Id
   * @param page Page number from that on entities are returned.
   * @param size Entities per page.
   */
  public apiV1PostsStatusStatusGetUsingGETWithHttpInfo(status: string,
  page?: number, size?: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/posts/status/${status}'
      .replace('${' + 'status' + '}', String(status));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'status' is not null or undefined
    if (status === null || status === undefined) {
      throw new Error('Required parameter status was null or undefined when calling apiV1PostsStatusStatusGetUsingGET.');
    }
    if (page !== undefined) {
      queryParameters.set('page', <any>page);
    }

    if (size !== undefined) {
      queryParameters.set('size', <any>size);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Posts from Tag
   * Returns all posts from defined Tag.
   * @param tagId Unique identifier of a Tag;
   * @param page Page number from that on entities are returned.
   * @param size Entities per page.
   */
  public apiV1PostsTagTagIdGetUsingGETWithHttpInfo(tagId: number,
  page?: number, size?: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/posts/tag/${tagId}'
      .replace('${' + 'tagId' + '}', String(tagId));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'tagId' is not null or undefined
    if (tagId === null || tagId === undefined) {
      throw new Error('Required parameter tagId was null or undefined when calling apiV1PostsTagTagIdGetUsingGET.');
    }
    if (page !== undefined) {
      queryParameters.set('page', <any>page);
    }

    if (size !== undefined) {
      queryParameters.set('size', <any>size);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Posts from Tag and Status
   * Returns all posts from defined Tag and Status.
   * @param tagId Unique identifier of a Tag;
   * @param status Post Status Id
   * @param page Page number from that on entities are returned.
   * @param size Entities per page.
   */
  public apiV1PostsTagTagIdStatusGetUsingGETWithHttpInfo(tagId: number, status: string,
  page?: number, size?: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/api/v1/posts/tag/${tagId}/${status}'
      .replace('${' + 'tagId' + '}', String(tagId))
      .replace('${' + 'status' + '}', String(status));

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'tagId' is not null or undefined
    if (tagId === null || tagId === undefined) {
      throw new Error('Required parameter tagId was null or undefined when calling apiV1PostsTagTagIdStatusGetUsingGET.');
    }
    // verify required parameter 'status' is not null or undefined
    if (status === null || status === undefined) {
      throw new Error('Required parameter status was null or undefined when calling apiV1PostsTagTagIdStatusGetUsingGET.');
    }
    if (page !== undefined) {
      queryParameters.set('page', <any>page);
    }

    if (size !== undefined) {
      queryParameters.set('size', <any>size);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

}
